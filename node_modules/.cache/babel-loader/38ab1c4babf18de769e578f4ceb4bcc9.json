{"ast":null,"code":"import { Transaction } from \"@solana/web3.js\";\nimport { splitArgsAndCtx } from \"../context\";\nexport default class TransactionFactory {\n  static build(idlIx, ixFn) {\n    const txFn = function () {\n      var _a;\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      const [, ctx] = splitArgsAndCtx(idlIx, [...args]);\n      const tx = new Transaction();\n      (_a = ctx.instructions) === null || _a === void 0 ? void 0 : _a.forEach(ix => tx.add(ix));\n      tx.add(ixFn(...args));\n      return tx;\n    };\n\n    return txFn;\n  }\n\n}","map":{"version":3,"sources":["/root/mysolanaapp2/app/node_modules/@project-serum/anchor/src/program/namespace/transaction.ts"],"names":[],"mappings":"AAAA,SAAS,WAAT,QAA4B,iBAA5B;AAEA,SAAS,eAAT,QAAgC,YAAhC;AAQA,eAAc,MAAO,kBAAP,CAAyB;AAClB,SAAL,KAAK,CACjB,KADiB,EAEjB,IAFiB,EAEU;AAE3B,UAAM,IAAI,GAA0B,YAAyB;;;AAAA,wCAArB,IAAqB;AAArB,QAAA,IAAqB;AAAA;;AAC3D,YAAM,GAAG,GAAH,IAAU,eAAe,CAAC,KAAD,EAAQ,CAAC,GAAG,IAAJ,CAAR,CAA/B;AACA,YAAM,EAAE,GAAG,IAAI,WAAJ,EAAX;AACA,OAAA,EAAA,GAAA,GAAG,CAAC,YAAJ,MAAgB,IAAhB,IAAgB,EAAA,KAAA,KAAA,CAAhB,GAAgB,KAAA,CAAhB,GAAgB,EAAA,CAAE,OAAF,CAAW,EAAD,IAAQ,EAAE,CAAC,GAAH,CAAO,EAAP,CAAlB,CAAhB;AACA,MAAA,EAAE,CAAC,GAAH,CAAO,IAAI,CAAC,GAAG,IAAJ,CAAX;AACA,aAAO,EAAP;AACD,KAND;;AAQA,WAAO,IAAP;AACD;;AAdoC","sourcesContent":["import { Transaction } from \"@solana/web3.js\";\nimport { Idl, IdlInstruction } from \"../../idl\";\nimport { splitArgsAndCtx } from \"../context\";\nimport { InstructionFn } from \"./instruction\";\nimport {\n  AllInstructions,\n  InstructionContextFn,\n  MakeInstructionsNamespace,\n} from \"./types\";\n\nexport default class TransactionFactory {\n  public static build<IDL extends Idl, I extends AllInstructions<IDL>>(\n    idlIx: I,\n    ixFn: InstructionFn<IDL, I>\n  ): TransactionFn<IDL, I> {\n    const txFn: TransactionFn<IDL, I> = (...args): Transaction => {\n      const [, ctx] = splitArgsAndCtx(idlIx, [...args]);\n      const tx = new Transaction();\n      ctx.instructions?.forEach((ix) => tx.add(ix));\n      tx.add(ixFn(...args));\n      return tx;\n    };\n\n    return txFn;\n  }\n}\n\n/**\n * The namespace provides functions to build [[Transaction]] objects for each\n * method of a program.\n *\n * ## Usage\n *\n * ```javascript\n * program.transaction.<method>(...args, ctx);\n * ```\n *\n * ## Parameters\n *\n * 1. `args` - The positional arguments for the program. The type and number\n *    of these arguments depend on the program being used.\n * 2. `ctx`  - [[Context]] non-argument parameters to pass to the method.\n *    Always the last parameter in the method call.\n *\n * ## Example\n *\n * To create an instruction for the `increment` method above,\n *\n * ```javascript\n * const tx = await program.transaction.increment({\n *   accounts: {\n *     counter,\n *   },\n * });\n * ```\n */\nexport type TransactionNamespace<\n  IDL extends Idl = Idl,\n  I extends AllInstructions<IDL> = AllInstructions<IDL>\n> = MakeInstructionsNamespace<IDL, I, Transaction>;\n\n/**\n * Tx is a function to create a `Transaction` for a given program instruction.\n */\nexport type TransactionFn<\n  IDL extends Idl = Idl,\n  I extends AllInstructions<IDL> = AllInstructions<IDL>\n> = InstructionContextFn<IDL, I, Transaction>;\n"]},"metadata":{},"sourceType":"module"}