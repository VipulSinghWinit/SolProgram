{"ast":null,"code":"import camelCase from \"camelcase\";\nimport StateFactory from \"./state\";\nimport InstructionFactory from \"./instruction\";\nimport TransactionFactory from \"./transaction\";\nimport RpcFactory from \"./rpc\";\nimport AccountFactory from \"./account\";\nimport SimulateFactory from \"./simulate\";\nimport { parseIdlErrors } from \"../common\"; // Re-exports.\n\nexport { StateClient } from \"./state\";\nexport { AccountClient } from \"./account\";\nexport default class NamespaceFactory {\n  /**\n   * Generates all namespaces for a given program.\n   */\n  static build(idl, coder, programId, provider) {\n    const rpc = {};\n    const instruction = {};\n    const transaction = {};\n    const simulate = {};\n    const idlErrors = parseIdlErrors(idl);\n    const state = StateFactory.build(idl, coder, programId, provider);\n    idl.instructions.forEach(idlIx => {\n      const ixItem = InstructionFactory.build(idlIx, (ixName, ix) => coder.instruction.encode(ixName, ix), programId);\n      const txItem = TransactionFactory.build(idlIx, ixItem);\n      const rpcItem = RpcFactory.build(idlIx, txItem, idlErrors, provider);\n      const simulateItem = SimulateFactory.build(idlIx, txItem, idlErrors, provider, coder, programId, idl);\n      const name = camelCase(idlIx.name);\n      instruction[name] = ixItem;\n      transaction[name] = txItem;\n      rpc[name] = rpcItem;\n      simulate[name] = simulateItem;\n    });\n    const account = idl.accounts ? AccountFactory.build(idl, coder, programId, provider) : {};\n    return [rpc, instruction, transaction, account, simulate, state];\n  }\n\n}","map":{"version":3,"sources":["/root/mysolanaapp2/app/node_modules/@project-serum/anchor/src/program/namespace/index.ts"],"names":[],"mappings":"AAAA,OAAO,SAAP,MAAsB,WAAtB;AAKA,OAAO,YAAP,MAA0C,SAA1C;AACA,OAAO,kBAAP,MAAyD,eAAzD;AACA,OAAO,kBAAP,MAAyD,eAAzD;AACA,OAAO,UAAP,MAAyC,OAAzC;AACA,OAAO,cAAP,MAAiD,WAAjD;AACA,OAAO,eAAP,MAAmD,YAAnD;AACA,SAAS,cAAT,QAA+B,WAA/B,C,CAGA;;AACA,SAAS,WAAT,QAA4B,SAA5B;AAIA,SAA2B,aAA3B,QAAgE,WAAhE;AAIA,eAAc,MAAO,gBAAP,CAAuB;AACnC;;AAEG;AACgB,SAAL,KAAK,CACjB,GADiB,EAEjB,KAFiB,EAGjB,SAHiB,EAIjB,QAJiB,EAIC;AASlB,UAAM,GAAG,GAAiB,EAA1B;AACA,UAAM,WAAW,GAAyB,EAA1C;AACA,UAAM,WAAW,GAAyB,EAA1C;AACA,UAAM,QAAQ,GAAsB,EAApC;AAEA,UAAM,SAAS,GAAG,cAAc,CAAC,GAAD,CAAhC;AAEA,UAAM,KAAK,GAAG,YAAY,CAAC,KAAb,CAAmB,GAAnB,EAAwB,KAAxB,EAA+B,SAA/B,EAA0C,QAA1C,CAAd;AAEA,IAAA,GAAG,CAAC,YAAJ,CAAiB,OAAjB,CAA0D,KAAjC,IAA6C;AACpE,YAAM,MAAM,GAAG,kBAAkB,CAAC,KAAnB,CACb,KADa,EAEb,CAAC,MAAD,EAAS,EAAT,KAAgB,KAAK,CAAC,WAAN,CAAkB,MAAlB,CAAyB,MAAzB,EAAiC,EAAjC,CAFH,EAGb,SAHa,CAAf;AAKA,YAAM,MAAM,GAAG,kBAAkB,CAAC,KAAnB,CAAyB,KAAzB,EAAgC,MAAhC,CAAf;AACA,YAAM,OAAO,GAAG,UAAU,CAAC,KAAX,CAAiB,KAAjB,EAAwB,MAAxB,EAAgC,SAAhC,EAA2C,QAA3C,CAAhB;AACA,YAAM,YAAY,GAAG,eAAe,CAAC,KAAhB,CACnB,KADmB,EAEnB,MAFmB,EAGnB,SAHmB,EAInB,QAJmB,EAKnB,KALmB,EAMnB,SANmB,EAOnB,GAPmB,CAArB;AAUA,YAAM,IAAI,GAAG,SAAS,CAAC,KAAK,CAAC,IAAP,CAAtB;AAEA,MAAA,WAAW,CAAC,IAAD,CAAX,GAAoB,MAApB;AACA,MAAA,WAAW,CAAC,IAAD,CAAX,GAAoB,MAApB;AACA,MAAA,GAAG,CAAC,IAAD,CAAH,GAAY,OAAZ;AACA,MAAA,QAAQ,CAAC,IAAD,CAAR,GAAiB,YAAjB;AACD,KAxBD;AA0BA,UAAM,OAAO,GAA0B,GAAG,CAAC,QAAJ,GACnC,cAAc,CAAC,KAAf,CAAqB,GAArB,EAA0B,KAA1B,EAAiC,SAAjC,EAA4C,QAA5C,CADmC,GAElC,EAFL;AAIA,WAAO,CACL,GADK,EAEL,WAFK,EAGL,WAHK,EAIL,OAJK,EAKL,QALK,EAML,KANK,CAAP;AAQD;;AAhEkC","sourcesContent":["import camelCase from \"camelcase\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport Coder from \"../../coder\";\nimport Provider from \"../../provider\";\nimport { Idl, IdlInstruction } from \"../../idl\";\nimport StateFactory, { StateClient } from \"./state\";\nimport InstructionFactory, { InstructionNamespace } from \"./instruction\";\nimport TransactionFactory, { TransactionNamespace } from \"./transaction\";\nimport RpcFactory, { RpcNamespace } from \"./rpc\";\nimport AccountFactory, { AccountNamespace } from \"./account\";\nimport SimulateFactory, { SimulateNamespace } from \"./simulate\";\nimport { parseIdlErrors } from \"../common\";\nimport { AllInstructions } from \"./types\";\n\n// Re-exports.\nexport { StateClient } from \"./state\";\nexport { InstructionNamespace, InstructionFn } from \"./instruction\";\nexport { TransactionNamespace, TransactionFn } from \"./transaction\";\nexport { RpcNamespace, RpcFn } from \"./rpc\";\nexport { AccountNamespace, AccountClient, ProgramAccount } from \"./account\";\nexport { SimulateNamespace, SimulateFn } from \"./simulate\";\nexport { IdlAccounts, IdlTypes } from \"./types\";\n\nexport default class NamespaceFactory {\n  /**\n   * Generates all namespaces for a given program.\n   */\n  public static build<IDL extends Idl>(\n    idl: IDL,\n    coder: Coder,\n    programId: PublicKey,\n    provider: Provider\n  ): [\n    RpcNamespace<IDL>,\n    InstructionNamespace<IDL>,\n    TransactionNamespace<IDL>,\n    AccountNamespace<IDL>,\n    SimulateNamespace<IDL>,\n    StateClient<IDL> | undefined\n  ] {\n    const rpc: RpcNamespace = {};\n    const instruction: InstructionNamespace = {};\n    const transaction: TransactionNamespace = {};\n    const simulate: SimulateNamespace = {};\n\n    const idlErrors = parseIdlErrors(idl);\n\n    const state = StateFactory.build(idl, coder, programId, provider);\n\n    idl.instructions.forEach(<I extends AllInstructions<IDL>>(idlIx: I) => {\n      const ixItem = InstructionFactory.build<IDL, I>(\n        idlIx,\n        (ixName, ix) => coder.instruction.encode(ixName, ix),\n        programId\n      );\n      const txItem = TransactionFactory.build(idlIx, ixItem);\n      const rpcItem = RpcFactory.build(idlIx, txItem, idlErrors, provider);\n      const simulateItem = SimulateFactory.build(\n        idlIx,\n        txItem,\n        idlErrors,\n        provider,\n        coder,\n        programId,\n        idl\n      );\n\n      const name = camelCase(idlIx.name);\n\n      instruction[name] = ixItem;\n      transaction[name] = txItem;\n      rpc[name] = rpcItem;\n      simulate[name] = simulateItem;\n    });\n\n    const account: AccountNamespace<IDL> = idl.accounts\n      ? AccountFactory.build(idl, coder, programId, provider)\n      : ({} as AccountNamespace<IDL>);\n\n    return [\n      rpc as RpcNamespace<IDL>,\n      instruction as InstructionNamespace<IDL>,\n      transaction as TransactionNamespace<IDL>,\n      account,\n      simulate as SimulateNamespace<IDL>,\n      state,\n    ];\n  }\n}\n"]},"metadata":{},"sourceType":"module"}