{"ast":null,"code":"var _jsxFileName = \"/root/mysolanaapp2/app/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport { useState } from 'react';\nimport { Connection, PublicKey } from '@solana/web3.js';\nimport { Program, Provider, web3 } from '@project-serum/anchor';\nimport idl from './idl.json';\nimport { getPhantomWallet } from '@solana/wallet-adapter-wallets';\nimport { useWallet, WalletProvider, ConnectionProvider } from '@solana/wallet-adapter-react';\nimport { WalletModalProvider, WalletMultiButton } from '@solana/wallet-adapter-react-ui';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nrequire('@solana/wallet-adapter-react-ui/styles.css');\n\nconst wallets = [\n/* view list of available wallets at https://github.com/solana-labs/wallet-adapter#wallets */\ngetPhantomWallet()];\nconst {\n  SystemProgram,\n  Keypair\n} = web3;\n/* create an account  */\n\nconst baseAccount = Keypair.generate();\nconst opts = {\n  preflightCommitment: \"processed\"\n};\nconst programID = new PublicKey(idl.metadata.address);\n\nfunction App() {\n  _s();\n\n  const [value, setValue] = useState(null);\n  const wallet = useWallet();\n\n  async function getProvider() {\n    /* create the provider and return it to the caller */\n\n    /* network set to local network for now */\n    const network = \"http://127.0.0.1:8899\";\n    const connection = new Connection(network, opts.preflightCommitment);\n    const provider = new Provider(connection, wallet, opts.preflightCommitment);\n    return provider;\n  }\n\n  async function createCounter() {\n    const provider = await getProvider();\n    /* create the program interface combining the idl, program ID, and provider */\n\n    const program = new Program(idl, programID, provider);\n\n    try {\n      /* interact with the program via rpc */\n      await program.rpc.create({\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n          systemProgram: SystemProgram.programId\n        },\n        signers: [baseAccount]\n      });\n      const account = await program.account.baseAccount.fetch(baseAccount.publicKey);\n      console.log('account: ', account);\n      setValue(account.count.toString());\n    } catch (err) {\n      console.log(\"Transaction error: \", err);\n    }\n  }\n\n  async function increment() {\n    const provider = await getProvider();\n    const program = new Program(idl, programID, provider);\n    await program.rpc.increment({\n      accounts: {\n        baseAccount: baseAccount.publicKey\n      }\n    });\n    const account = await program.account.baseAccount.fetch(baseAccount.publicKey);\n    console.log('account: ', account);\n    setValue(account.count.toString());\n  }\n\n  if (!wallet.connected) {\n    /* If the user's wallet is not connected, display connect wallet button. */\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'center',\n        marginTop: '100px'\n      },\n      children: /*#__PURE__*/_jsxDEV(WalletMultiButton, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [!value && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: createCounter,\n          children: \"Create counter\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 24\n        }, this), value && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: increment,\n          children: \"Increment counter\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 22\n        }, this), value && value >= Number(0) ? /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: value\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Please create the counter.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this);\n  }\n}\n/* wallet configuration as specified here: https://github.com/solana-labs/wallet-adapter#setup */\n\n\n_s(App, \"Vw8knGClUx1d8crU582eZvSN76k=\", false, function () {\n  return [useWallet];\n});\n\n_c = App;\n\nconst AppWithProvider = () => /*#__PURE__*/_jsxDEV(ConnectionProvider, {\n  endpoint: \"https://api.devnet.solana.com\",\n  children: /*#__PURE__*/_jsxDEV(WalletProvider, {\n    wallets: wallets,\n    autoConnect: true,\n    children: /*#__PURE__*/_jsxDEV(WalletModalProvider, {\n      children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 113,\n  columnNumber: 3\n}, this);\n\n_c2 = AppWithProvider;\nexport default AppWithProvider;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"AppWithProvider\");","map":{"version":3,"sources":["/root/mysolanaapp2/app/src/App.js"],"names":["useState","Connection","PublicKey","Program","Provider","web3","idl","getPhantomWallet","useWallet","WalletProvider","ConnectionProvider","WalletModalProvider","WalletMultiButton","require","wallets","SystemProgram","Keypair","baseAccount","generate","opts","preflightCommitment","programID","metadata","address","App","value","setValue","wallet","getProvider","network","connection","provider","createCounter","program","rpc","create","accounts","publicKey","user","systemProgram","programId","signers","account","fetch","console","log","count","toString","err","increment","connected","display","justifyContent","marginTop","Number","AppWithProvider"],"mappings":"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","sourcesContent":["import './App.css';\nimport { useState } from 'react';\nimport { Connection, PublicKey } from '@solana/web3.js';\nimport {\n  Program, Provider, web3\n} from '@project-serum/anchor';\nimport idl from './idl.json';\n\nimport { getPhantomWallet } from '@solana/wallet-adapter-wallets';\nimport { useWallet, WalletProvider, ConnectionProvider } from '@solana/wallet-adapter-react';\nimport { WalletModalProvider, WalletMultiButton } from '@solana/wallet-adapter-react-ui';\nrequire('@solana/wallet-adapter-react-ui/styles.css');\n\nconst wallets = [\n  /* view list of available wallets at https://github.com/solana-labs/wallet-adapter#wallets */\n  getPhantomWallet()\n]\n\nconst { SystemProgram, Keypair } = web3;\n/* create an account  */\nconst baseAccount = Keypair.generate();\nconst opts = {\n  preflightCommitment: \"processed\"\n}\nconst programID = new PublicKey(idl.metadata.address);\n\nfunction App() {\n  const [value, setValue] = useState(null);\n  const wallet = useWallet();\n\n  async function getProvider() {\n    /* create the provider and return it to the caller */\n    /* network set to local network for now */\n    const network = \"http://127.0.0.1:8899\";\n    const connection = new Connection(network, opts.preflightCommitment);\n\n    const provider = new Provider(\n      connection, wallet, opts.preflightCommitment,\n    );\n    return provider;\n  }\n\n  async function createCounter() {    \n    const provider = await getProvider()\n    /* create the program interface combining the idl, program ID, and provider */\n    const program = new Program(idl, programID, provider);\n    try {\n      /* interact with the program via rpc */\n      await program.rpc.create({\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n          systemProgram: SystemProgram.programId,\n        },\n        signers: [baseAccount]\n      });\n\n      const account = await program.account.baseAccount.fetch(baseAccount.publicKey);\n      console.log('account: ', account);\n      setValue(account.count.toString());\n    } catch (err) {\n      console.log(\"Transaction error: \", err);\n    }\n  }\n\n  async function increment() {\n    const provider = await getProvider();\n    const program = new Program(idl, programID, provider);\n    await program.rpc.increment({\n      accounts: {\n        baseAccount: baseAccount.publicKey\n      }\n    });\n\n    const account = await program.account.baseAccount.fetch(baseAccount.publicKey);\n    console.log('account: ', account);\n    setValue(account.count.toString());\n  }\n\n  if (!wallet.connected) {\n    /* If the user's wallet is not connected, display connect wallet button. */\n    return (\n      <div style={{ display: 'flex', justifyContent: 'center', marginTop:'100px' }}>\n        <WalletMultiButton />\n      </div>\n    )\n  } else {\n    return (\n      <div className=\"App\">\n        <div>\n          {\n            !value && (<button onClick={createCounter}>Create counter</button>)\n          }\n          {\n            value && <button onClick={increment}>Increment counter</button>\n          }\n\n          {\n            value && value >= Number(0) ? (\n              <h2>{value}</h2>\n            ) : (\n              <h3>Please create the counter.</h3>\n            )\n          }\n        </div>\n      </div>\n    );\n  }\n}\n\n/* wallet configuration as specified here: https://github.com/solana-labs/wallet-adapter#setup */\nconst AppWithProvider = () => (\n  <ConnectionProvider endpoint=\"https://api.devnet.solana.com\">\n    <WalletProvider wallets={wallets} autoConnect>\n      <WalletModalProvider>\n        <App />\n      </WalletModalProvider>\n    </WalletProvider>\n  </ConnectionProvider>\n)\n\nexport default AppWithProvider; "]},"metadata":{},"sourceType":"module"}