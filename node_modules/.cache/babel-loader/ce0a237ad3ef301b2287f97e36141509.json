{"ast":null,"code":"import { splitArgsAndCtx } from \"../context\";\nimport { ProgramError } from \"../../error\";\nexport default class RpcFactory {\n  static build(idlIx, txFn, idlErrors, provider) {\n    const rpc = async function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      const tx = txFn(...args);\n      const [, ctx] = splitArgsAndCtx(idlIx, [...args]);\n\n      try {\n        const txSig = await provider.send(tx, ctx.signers, ctx.options);\n        return txSig;\n      } catch (err) {\n        console.log(\"Translating error\", err);\n        let translatedErr = ProgramError.parse(err, idlErrors);\n\n        if (translatedErr === null) {\n          throw err;\n        }\n\n        throw translatedErr;\n      }\n    };\n\n    return rpc;\n  }\n\n}","map":{"version":3,"sources":["/root/mysolanaapp2/app/node_modules/@project-serum/anchor/src/program/namespace/rpc.ts"],"names":[],"mappings":"AAGA,SAAS,eAAT,QAAgC,YAAhC;AAEA,SAAS,YAAT,QAA6B,aAA7B;AAOA,eAAc,MAAO,UAAP,CAAiB;AACV,SAAL,KAAK,CACjB,KADiB,EAEjB,IAFiB,EAGjB,SAHiB,EAIjB,QAJiB,EAIC;AAElB,UAAM,GAAG,GAAkB,kBAAkB;AAAA,wCAAR,IAAQ;AAAR,QAAA,IAAQ;AAAA;;AAC3C,YAAM,EAAE,GAAG,IAAI,CAAC,GAAG,IAAJ,CAAf;AACA,YAAM,GAAG,GAAH,IAAU,eAAe,CAAC,KAAD,EAAQ,CAAC,GAAG,IAAJ,CAAR,CAA/B;;AACA,UAAI;AACF,cAAM,KAAK,GAAG,MAAM,QAAQ,CAAC,IAAT,CAAc,EAAd,EAAkB,GAAG,CAAC,OAAtB,EAA+B,GAAG,CAAC,OAAnC,CAApB;AACA,eAAO,KAAP;AACD,OAHD,CAGE,OAAO,GAAP,EAAY;AACZ,QAAA,OAAO,CAAC,GAAR,CAAY,mBAAZ,EAAiC,GAAjC;AACA,YAAI,aAAa,GAAG,YAAY,CAAC,KAAb,CAAmB,GAAnB,EAAwB,SAAxB,CAApB;;AACA,YAAI,aAAa,KAAK,IAAtB,EAA4B;AAC1B,gBAAM,GAAN;AACD;;AACD,cAAM,aAAN;AACD;AACF,KAdD;;AAgBA,WAAO,GAAP;AACD;;AAxB4B","sourcesContent":["import { TransactionSignature } from \"@solana/web3.js\";\nimport Provider from \"../../provider\";\nimport { Idl } from \"../../idl\";\nimport { splitArgsAndCtx } from \"../context\";\nimport { TransactionFn } from \"./transaction\";\nimport { ProgramError } from \"../../error\";\nimport {\n  AllInstructions,\n  InstructionContextFn,\n  MakeInstructionsNamespace,\n} from \"./types\";\n\nexport default class RpcFactory {\n  public static build<IDL extends Idl, I extends AllInstructions<IDL>>(\n    idlIx: I,\n    txFn: TransactionFn<IDL, I>,\n    idlErrors: Map<number, string>,\n    provider: Provider\n  ): RpcFn {\n    const rpc: RpcFn<IDL, I> = async (...args) => {\n      const tx = txFn(...args);\n      const [, ctx] = splitArgsAndCtx(idlIx, [...args]);\n      try {\n        const txSig = await provider.send(tx, ctx.signers, ctx.options);\n        return txSig;\n      } catch (err) {\n        console.log(\"Translating error\", err);\n        let translatedErr = ProgramError.parse(err, idlErrors);\n        if (translatedErr === null) {\n          throw err;\n        }\n        throw translatedErr;\n      }\n    };\n\n    return rpc;\n  }\n}\n\n/**\n * The namespace provides async methods to send signed transactions for each\n * *non*-state method on Anchor program.\n *\n * Keys are method names, values are RPC functions returning a\n * [[TransactionInstruction]].\n *\n * ## Usage\n *\n * ```javascript\n * rpc.<method>(...args, ctx);\n * ```\n *\n * ## Parameters\n *\n * 1. `args` - The positional arguments for the program. The type and number\n *    of these arguments depend on the program being used.\n * 2. `ctx`  - [[Context]] non-argument parameters to pass to the method.\n *    Always the last parameter in the method call.\n * ```\n *\n * ## Example\n *\n * To send a transaction invoking the `increment` method above,\n *\n * ```javascript\n * const txSignature = await program.rpc.increment({\n *   accounts: {\n *     counter,\n *     authority,\n *   },\n * });\n * ```\n */\nexport type RpcNamespace<\n  IDL extends Idl = Idl,\n  I extends AllInstructions<IDL> = AllInstructions<IDL>\n> = MakeInstructionsNamespace<IDL, I, Promise<TransactionSignature>>;\n\n/**\n * RpcFn is a single RPC method generated from an IDL, sending a transaction\n * paid for and signed by the configured provider.\n */\nexport type RpcFn<\n  IDL extends Idl = Idl,\n  I extends AllInstructions<IDL> = AllInstructions<IDL>\n> = InstructionContextFn<IDL, I, Promise<TransactionSignature>>;\n"]},"metadata":{},"sourceType":"module"}